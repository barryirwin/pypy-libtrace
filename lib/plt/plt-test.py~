
import plt, ipp
import os

# try-trace.py: test program for pypy plt

base = "/Users/jbro111"  # OSX
#base = "/home/nevil"      # Ubuntu

#fn = "pypy/small-sample.erf"

fn = "tcp-analyse/fdt-p5.pcap"
#fn = "pypy/small-sample.pcap"
#fn = "pypy/1000packets.pcap.gz"

full_fn = base + '/' + fn

#trace_format = "pcap"  # Works for fdt-p5.pcap!
trace_format = "pcapfile"
#trace_format = "erf"

uri = trace_format + ':' + full_fn
print ">> uri = %s" % uri
t = plt.trace(uri)
t.start()

td = {}

def print_ca(msg, ca):
    print "%s: " % msg,
    for b in ca:
        print "%02x " % b,
    print

def print_cas(msg, ca):
    print "%s: " % msg,
    for b in ca:
        print "%02x " % ord(b),
    print

def make_key(ver, proto, sa, da, sp, dp):
    key = plt.ffi.new("uint8_t[14]")
    key[0] = 4
    key[1] = proto
    plt.set_bytes(key[2:6], sa.addr, 4)
    plt.set_bytes(key[6:10], da.addr, 4)
    plt.set_short(key[10:12], sp)
    plt.set_short(key[12:14], dp)
    return str(plt.ffi.buffer(key))
        # key as a python (immutable) string
        # Need this to use it as a dictionary key

def split_key(k):
    key = bytearray(k)  # So we can index it
    ver = key[0]
    proto = key[1]
    sa = ipp.IPprefix(ver, key[2:6])
    da = ipp.IPprefix(ver, key[6:10])
    sp = plt.get_short(k, 10)
    dp = plt.get_short(k, 12)
    return (ver, proto, sa, da, sp, dp)

class flow:
    def __init__(self):
        self.fwd = 1;  self.rev = 0

    def __str__(self):
        return "%3d to, %3d from" % (self.fwd, self.rev)
        
n = 0
for pkt in t:
    n += 1
    ip = pkt.ip
    if not ip:
        continue  # IPv6

    tcp = pkt.tcp
    if tcp:
        proto = 6;  sp = tcp.src_port; dp = tcp.dst_port
    else:
        udp = pkt.udp
        if udp:
            proto = 17;  sp = udp.src_port; dp = udp.dst_port
        else:
            continue

    sa = ip.src_prefix;  da = ip.dst_prefix

    fkey = make_key(ip.version, proto, sa, da, sp, dp)
    v = td.get(fkey)
    if v:  # Found forward
        td[fkey].fwd += 1
    else:
        rkey = make_key(ip.version, proto, da, sa, dp, sp)
        v = td.get(rkey)
        if v:  # Found reverse
            td[rkey].rev += 1
        else:  # New flow
            td[fkey] = flow()
            
    if n == 100:  # 1-org
        break
        
print "EOF - - -"

keys = sorted(td)
for k in keys:
    ver, proto, sa, da, sp, dp = split_key(k)
    print "%s:  key = %d %2d, %s %s, %d %d" % (
        td[k], ver, proto, sa, da, sp, dp)

